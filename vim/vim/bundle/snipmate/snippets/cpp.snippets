# main()
snippet main
	int main(int argc, const char* argv[]) {
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:iostream}>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${2}

	#endif // $1
# If Condition
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet elif
	else if (${1}) {
		${2}
	}
# Ternary conditional
snippet t
	${1} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2}
	} while (${1});
# While Loop
snippet while
	while (${1:true}) {
		${2}
	}
# For Loop
snippet for
	for (${1}) {
		${2}
	}
snippet forr
	for (auto& i : ${1}) {
		${2}
	}
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; ++$2) {
		${3}
	}
snippet switch
	switch (${1}) {
	case ${2}:
		${3}
		break;
	default:
		${4}
		break;
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
snippet pr
	for (auto& i : ${1}) {
		std::cout << i << ${2}std::endl;
	}
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} // $1
snippet uns
	using namespace ${1:std};${2}
# Class
snippet class
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1(${2}) {${3}}
		~$1() {${4}}
	private:
	};
# try catch
snippet try
	try {
		${2}
	} catch (const ${1:std::exception}& e) {
		${3}
	}
